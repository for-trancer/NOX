server -- 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>

#define PORT 8080
#define MAXLINE 1024

int main() {
    int sockfd, newsockfd, n;
    struct sockaddr_in servaddr, cliaddr;
    socklen_t len;
    char buffer[MAXLINE];
    FILE *fp;

    // Creating socket file descriptor
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd == -1) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));

    // Assigning IP, PORT
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servaddr.sin_port = htons(PORT);

    // Binding newly created socket to given IP and verification
    if ((bind(sockfd, (const struct sockaddr *)&servaddr, sizeof(servaddr))) != 0) {
        perror("Bind failed");
        exit(EXIT_FAILURE);
    }

    // Now server is ready to listen and verification
    if ((listen(sockfd, 5)) != 0) {
        perror("Listen failed");
        exit(EXIT_FAILURE);
    }

    len = sizeof(cliaddr);

    // Accept the data packet from client and verification
    newsockfd = accept(sockfd, (struct sockaddr *)&cliaddr, &len);
    if (newsockfd < 0) {
        perror("Accept failed");
        exit(EXIT_FAILURE);
    }

    // Receive filename from client
    memset(buffer, 0, MAXLINE);
    if ((n = recv(newsockfd, buffer, MAXLINE, 0)) <= 0) {
        perror("Receive failed");
        exit(EXIT_FAILURE);
    }

    // Open the file to be transferred and display its content
    fp = fopen(buffer, "r");
    if (fp == NULL) {
        perror("File opening failed");
        exit(EXIT_FAILURE);
    }

    printf("Content of the file:\n");
    while ((n = fread(buffer, 1, sizeof(buffer), fp)) > 0) {
        fwrite(buffer, 1, n, stdout);
    }
    printf("\n");

    // Reset file pointer to beginning
    fseek(fp, 0, SEEK_SET);

    // Send data from file to client
    while ((n = fread(buffer, 1, sizeof(buffer), fp)) > 0) {
        if (send(newsockfd, buffer, n, 0) == -1) {
            perror("Send failed");
            exit(EXIT_FAILURE);
        }
    }

    // Close the file and socket
    fclose(fp);
    close(newsockfd);
    close(sockfd);

    return 0;
}



client -- 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>

#define PORT 8080
#define MAXLINE 1024

int main() {
    int sockfd, n;
    char buffer[MAXLINE];
    struct sockaddr_in servaddr;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd == -1) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));

    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(PORT);
    servaddr.sin_addr.s_addr = INADDR_ANY;

    // Connect the client socket to server socket
    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) != 0) {
        perror("Connection failed");
        exit(EXIT_FAILURE);
    }

    // Send filename to server
    printf("Enter filename: ");
    fgets(buffer, MAXLINE, stdin);
    buffer[strcspn(buffer, "\n")] = 0; // Remove trailing newline
    send(sockfd, buffer, strlen(buffer), 0);

    // Receive data from server and display it
    printf("Content of the file:\n");
    while ((n = recv(sockfd, buffer, MAXLINE, 0)) > 0) {
        fwrite(buffer, 1, n, stdout);
    }
    printf("\n");

    // Close the socket
    close(sockfd);

    return 0;
}
